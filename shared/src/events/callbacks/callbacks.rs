// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProcessEvent {
    /// Process ID
    #[prost(uint32, tag = "1")]
    pub pid: u32,
    /// Parent Process ID
    #[prost(uint32, tag = "2")]
    pub ppid: u32,
    /// Unicode image file name
    #[prost(string, tag = "3")]
    pub image_path: ::prost::alloc::string::String,
    /// Unicode command line
    #[prost(string, tag = "4")]
    pub cmdline: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImageLoadEvent {
    /// Base address of the loaded image
    #[prost(uint64, tag = "1")]
    pub image_base: u64,
    /// Size in bytes
    #[prost(uint32, tag = "2")]
    pub image_size: u32,
    /// Unicode path to image
    #[prost(string, tag = "3")]
    pub full_image_name: ::prost::alloc::string::String,
    /// ID of the process into which it was loaded
    #[prost(uint32, tag = "4")]
    pub process_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegistryEvent {
    /// Full registry key name
    #[prost(string, tag = "1")]
    pub key_path: ::prost::alloc::string::String,
    /// Create/Delete/Modify
    #[prost(enumeration = "OperationType", tag = "2")]
    pub op_type: i32,
    /// Previous data (if applicable)
    #[prost(bytes = "vec", tag = "3")]
    pub old_value: ::prost::alloc::vec::Vec<u8>,
    /// New data (if applicable)
    #[prost(bytes = "vec", tag = "4")]
    pub new_value: ::prost::alloc::vec::Vec<u8>,
    /// ID of process making change
    #[prost(uint32, tag = "5")]
    pub process_id: u32,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum OperationType {
    Unknown = 0,
    Create = 1,
    Delete = 2,
    Modify = 3,
}
impl OperationType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "UNKNOWN",
            Self::Create => "CREATE",
            Self::Delete => "DELETE",
            Self::Modify => "MODIFY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN" => Some(Self::Unknown),
            "CREATE" => Some(Self::Create),
            "DELETE" => Some(Self::Delete),
            "MODIFY" => Some(Self::Modify),
            _ => None,
        }
    }
}
